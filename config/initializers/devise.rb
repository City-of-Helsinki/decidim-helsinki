# frozen_string_literal: true

require "omniauth/strategies/openid_connect_helsinki"

Devise.setup do |config|
  # This is needed because of a bug in 0.24 which forces the sessions to close
  # after 30 minutes. In future Decidim versions we can remove this as it will
  # be set using Decidim's own `expire_session_after` configuration.
  config.timeout_in = Rails.application.config.session_validity_period

  config.secret_key = Rails.application.secrets.secret_key_devise.inspect

  ###################################
  # Setup Tunnistamo authentication #
  ###################################
  server_uri = Rails.application.config.tunnistamo_auth_server
  if server_uri
    urlopts = Rails.application.config.action_controller.default_url_options

    # Fallback to localhost (development, testing, etc.)
    app_root_url = begin
      if urlopts && urlopts[:host]
        url = urlopts[:protocol] || (urlopts[:port] == 443 ? "https" : "http")
        url += "://#{urlopts[:host]}"
        url += ":#{urlopts[:port]}" if urlopts[:port] && !urlopts[:port].to_s.match(/^80|443$/)
        url
      else
        "http://localhost:3000"
      end
    end

    client_id = Rails.application.secrets.dig(:omniauth, :tunnistamo, :app_id)
    client_secret = Rails.application.secrets.dig(:omniauth, :tunnistamo, :app_secret)

    auth_uri = URI.parse(server_uri)

    config.omniauth(
      :openid_connect_helsinki,
      name: :tunnistamo,
      scope: [:openid, :email, :profile],
      response_type: :code,
      issuer: "#{server_uri}/openid",
      discovery: true,
      client_options: {
        port: auth_uri.port,
        scheme: auth_uri.scheme,
        host: auth_uri.host,
        identifier: client_id,
        secret: client_secret,
        redirect_uri: "#{app_root_url}/users/auth/tunnistamo/callback"
      },
      # The omniauth_openid_connect gem relies on the openid_connect which uses
      # a request client inherited from rack-oauth2. This request client does
      # the access token requests to the authentication server and by default
      # it uses HTTP basic authentication. This does not work if the client
      # credentials contain specific characters (such as ":") which is why we
      # define the "other" authentication method when they are included in a
      # normal POST request. There is no `:other` auth method in the client but
      # with an unknown method it goes to the else block which does exactly
      # this. See: https://git.io/JfSD0
      client_auth_method: :other,
      post_logout_redirect_uri: app_root_url
    )

    # Make sure the SWD discovery requests (generated by the openid_connect gem)
    # will succeed also with the "http" URI scheme, so it does not force the
    # authentication endpoint to be secured (e.g. during development).
    SWD.url_builder = URI::HTTP if server_uri.match?(%r{^http://})
  end
end
