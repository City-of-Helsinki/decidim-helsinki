require 'helsinki/devise_failure_app'

Devise.setup do |config|
  # ==> Warden configuration
  # Needed to fix:
  # https://github.com/decidim/decidim/issues/4660
  config.warden do |manager|
    manager.failure_app = Helsinki::DeviseFailureApp
  end

  config.secret_key = Rails.application.secrets.secret_key_devise.inspect

  ###################################
  # Setup Tunnistamo authentication #
  ###################################
  if server_uri = Rails.application.config.tunnistamo_auth_server
    urlopts = Rails.application.config.action_controller.default_url_options

    # Fallback to localhost (development, testing, etc.)
    app_root_url = if urlopts && urlopts[:host]
      url = urlopts[:protocol] || (urlopts[:port] == 443 ? "https" : "http")
      url << "://#{urlopts[:host]}"
      url << ":#{urlopts[:port]}" if urlopts[:port] && !urlopts[:port].to_s.match(/^80|443$/)
      url
    else
      "http://localhost:3000"
    end

    jwks_key_path = Rails.root.join('tmp', 'tunnistamo.jwk')

    # Update the jwk cache file. For some reason the autoloading of this does
    # not work in the "omniauth_openid_connect" gem.
    jwks_uri = "#{server_uri}/openid/jwks"
    res = Net::HTTP.get_response(URI.parse(jwks_uri))
    if res.is_a?(Net::HTTPSuccess)
      File.open(jwks_key_path, 'w+') do |out|
        out << res.body
      end
    end

    # Read the signing key
    unless File.exist?(jwks_key_path)
      # Make sure the above Net::HTTP request completes successfully. If it
      # doesn't you can create the file manually.
      raise "The jwk signing keys for Tunnistamo authentication are not available."
    end
    jwk_signing_key = IO.read(jwks_key_path)

    client_id = Rails.application.secrets.dig(:omniauth, :tunnistamo, :app_id)
    client_secret = Rails.application.secrets.dig(:omniauth, :tunnistamo, :app_secret)

    auth_uri = URI.parse(server_uri)

    config.omniauth :openid_connect, {
      name: :tunnistamo,
      scope: [:openid, :email, :profile],
      response_type: :code,
      issuer: "#{server_uri}/openid",
      client_options: {
        port: auth_uri.port,
        scheme: auth_uri.scheme,
        host: auth_uri.host,
        identifier: client_id,
        secret: client_secret,
        redirect_uri: "#{app_root_url}/users/auth/tunnistamo/callback",
        authorization_endpoint: "#{auth_uri.path}/openid/authorize",
        token_endpoint: "#{auth_uri.path}/openid/token",
        userinfo_endpoint: "#{auth_uri.path}/openid/userinfo",
        jwks_uri: "#{auth_uri.path}/openid/jwks"
      },
      client_signing_alg: :RS512,
      client_jwk_signing_key: jwk_signing_key,
    }

    # Make sure the WebFinger discovery requests (generated by the openid_connect
    # gem) will succeed also with the "http" URI scheme, so it does not force the
    # authentication endpoint to be secured (e.g. during development).
    if server_uri =~ /^http:\/\//
      WebFinger.url_builder = URI::HTTP
    end
  end
end
